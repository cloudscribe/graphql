@page "/test1"
@using cloudscribe.Extensions.Blazor.Config
@using cloudscribe.Extensions.Blazor.Oidc
@inject HttpClient Http
@inject OidcService  oidc


<h2>Test</h2>

Access Token: Expires UTC @expires
<div>
    <textarea class="form-control">@accessToken</textarea>
</div>


Identity Token
<div>
    <textarea class="form-control">@identityToken</textarea>
</div>

<div>
    API Response
    <textarea class="form-control">@apiResponse</textarea>
</div>
<div>
    <button class="btn btn-primary" onclick="@GetApi">Make API Request</button>
</div>
@if(isServerAdmin)
{
    <div>In ServerAdmins role</div>
}
@if(isAdmin)
{
    <div>In Administrators role</div>
}
    <div>
        <h3>Test Websocket Subscribe to Site Mutation GraphQL Subscription</h3>
        <SocketTest />
    </div>


@functions {
   
    string accessToken = "";
    string identityToken = "";
    string apiResponse = "";
    string expires = "";
    bool isServerAdmin;
    bool isAdmin;

    async Task GetApi()
    {
        if (oidc.CurrentUser != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", oidc.CurrentUser.Access_Token);
        }
        var url = "https://localhost:44396/api/Identity";
        var response = await Http.GetAsync(url);
        response.EnsureSuccessStatusCode();
        apiResponse = await response.Content.ReadAsStringAsync();
    }

    protected override void OnInit()
    {
       
        if (oidc.CurrentUser != null)
        {
            //serializedUesr = Json.Serialize(oidc.CurrentUser);
            accessToken = oidc.CurrentUser.Access_Token;
            identityToken = oidc.CurrentUser.Id_Token;
            expires = oidc.CurrentUser.GetExpirationTime().ToString("s");
            //UserRoles = await oidc.GetUserRoles();
            isServerAdmin = oidc.IsInRole("ServerAdmins");
            isAdmin = oidc.IsInRole("Administrators");
        }

    }

}